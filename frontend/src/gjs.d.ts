/* eslint-disable @typescript-eslint/no-explicit-any */
// Declarations of some objects provided by GJS that aren't generated by gi.ts

interface Console {
	assert(condition: any, ...data: any[]): void;
	clear(): void;
	count(label?: string): void;
	countReset(label?: string): void;
	debug(...data: any[]): void;
	dir(item: any, options?: any): void;
	dirxml(...data: any[]): void;
	error(...data: any[]): void;
	group(...data: any[]): void;
	groupCollapsed(...data: any[]): void;
	groupEnd(): void;
	info(...data: any[]): void;
	log(...data: any[]): void;
	table(tabularData: any, options?: any): void;
	time(label?: string): void;
	timeEnd(label?: string): void;
	timeLog(label?: string, ...data: any[]): void;
	trace(...data: any[]): void;
	warn(...data: any[]): void;
}

declare const console: Console;

interface Package {
	init(options: { name: string; version: string; prefix: string; libdir: string }): void;
	run(main: any): void;
}

interface Imports {
	package: Package;
}

declare const imports: Imports;

declare module 'console' {
	export function setConsoleLogDomain(domain: string): void;
	export function getConsoleLogDomain(): string;
	export const DEFAULT_LOG_DOMAIN: string;
}

declare function setTimeout(callback: (...args: any[]) => void, delay: number, ...args: any[]): number;
declare function clearTimeout(id: number): void;
declare function setInterval(callback: (...args: any[]) => void, delay: number, ...args: any[]): number;
declare function clearInterval(id: number): void;

interface TextDecodeOptions {
	stream?: boolean;
}

interface TextDecoderOptions {
	fatal?: boolean;
	ignoreBOM?: boolean;
}

interface TextDecoder {
	decode(input?: Uint8Array, options?: TextDecodeOptions): string;
}

declare const TextDecoder: {
	prototype: TextDecoder;
	new (label?: string, options?: TextDecoderOptions): TextDecoder;
};

declare const ARGV: string[]

interface ImportMeta {
	url: string;
}

declare module 'system' {
	export function exit(code: number): void;
}
